package jp.co.worksap.ate.bootcamp.java1000.database.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class MockStatement implements IMockStatement{
	private Statement impl = null;

	private boolean throwExceptionAtExecute = false;

	public MockStatement(Statement st, boolean throwExcept) throws SQLException {
		if (st == null) {
			throw new SQLException();
		}
		this.throwExceptionAtExecute = throwExcept;
		impl = st;
		isClosed = false;
	}

	public MockStatement(Statement st) throws SQLException {
		this(st, false);
	}

	private boolean isClosed;

	/**
	 * クローズされているかどうかを確認
	 * @return
	 */
	@Override
	public boolean isClosed() {
		return isClosed;
	}

	private boolean hasError = false;
	@Override
	public boolean hasError() {
		return hasError;
	}

	public void close() throws SQLException {
		try {
			if (resultSet != null && !((MockResultSet)resultSet).isClosed()) {
				hasError = true;
				throw new SQLException("ResultSetを先にcloseしてください。");
			}

			impl.close();
			isClosed = true;
		} catch (SQLException e) {
			throw e;
		}
	}

	private ResultSet resultSet = null;


	public ResultSet executeQuery(String sql) throws SQLException {
		if (throwExceptionAtExecute) {
			throw new SQLException();
		}

		return impl.executeQuery(sql);
	}

	public int executeUpdate(String sql) throws SQLException {
		if (throwExceptionAtExecute) {
			throw new SQLException();
		}

		return impl.executeUpdate(sql);
	}

	public boolean execute(String sql) throws SQLException {
		if (throwExceptionAtExecute) {
			throw new SQLException();
		}

		return impl.execute(sql);
	}

	public ResultSet getResultSet() throws SQLException {
		return resultSet;
	}


	// 以下ただの委譲メソッド

	public int getMaxFieldSize() throws SQLException {
		return impl.getMaxFieldSize();
	}

	public void setMaxFieldSize(int max) throws SQLException {
		impl.setMaxFieldSize(max);
	}

	public int getMaxRows() throws SQLException {
		return impl.getMaxRows();
	}

	public void setMaxRows(int max) throws SQLException {
		impl.setMaxRows(max);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		impl.setEscapeProcessing(enable);
	}

	public int getQueryTimeout() throws SQLException {
		return impl.getQueryTimeout();
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		impl.setQueryTimeout(seconds);
	}

	public void cancel() throws SQLException {
		impl.cancel();
	}

	public SQLWarning getWarnings() throws SQLException {
		return impl.getWarnings();
	}

	public void clearWarnings() throws SQLException {
		impl.clearWarnings();
	}


	public void setCursorName(String name) throws SQLException {
		impl.setCursorName(name);
	}

	public int getUpdateCount() throws SQLException {
		return impl.getUpdateCount();
	}

	public boolean getMoreResults() throws SQLException {
		return impl.getMoreResults();
	}

	public void setFetchDirection(int direction) throws SQLException {
		impl.setFetchDirection(direction);
	}

	public int getFetchDirection() throws SQLException {
		return impl.getFetchDirection();
	}

	public void setFetchSize(int rows) throws SQLException {
		impl.setFetchSize(rows);
	}

	public int getFetchSize() throws SQLException {
		return impl.getFetchSize();
	}

	public int getResultSetConcurrency() throws SQLException {
		return impl.getResultSetConcurrency();
	}

	public int getResultSetType() throws SQLException {
		return impl.getResultSetType();
	}

	public void addBatch(String sql) throws SQLException {
		impl.addBatch(sql);
	}

	public void clearBatch() throws SQLException {
		impl.clearBatch();
	}

	public int[] executeBatch() throws SQLException {
		return impl.executeBatch();
	}

	public Connection getConnection() throws SQLException {
		return impl.getConnection();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return impl.getMoreResults(current);
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return impl.getGeneratedKeys();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		return impl.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		return impl.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		return impl.executeUpdate(sql, columnNames);
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return impl.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return impl.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return impl.execute(sql, columnNames);
	}

	public int getResultSetHoldability() throws SQLException {
		return impl.getResultSetHoldability();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public boolean isPoolable() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}

}
