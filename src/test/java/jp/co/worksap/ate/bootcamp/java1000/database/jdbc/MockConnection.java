package jp.co.worksap.ate.bootcamp.java1000.database.jdbc;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public final class MockConnection implements Connection{
	private Connection impl = null;

	public MockConnection(Connection con) {
		impl = con;
	}

	private List<IMockStatement> psList = new ArrayList<>();

	/**
	 * 全てのPreparedStatementが閉じられているか確認する
	 *
	 * @return
	 */
	public boolean isAllPreparedStatementClosed() {
		boolean result = true;
		for(Iterator<IMockStatement> it = psList.iterator();it.hasNext();) {
			IMockStatement ps = it.next();
			result = result && ps.isClosed();

			if (!result) {
				return false;
			}

			it.remove();
		}

		return result;
	}

	/**
	 * 全てのPreparedStatementが閉じられているか確認する
	 *
	 * @return
	 */
	public boolean isAllPreparedStatementNotHaveError() {
		boolean result = true;
		for(Iterator<IMockStatement> it = psList.iterator();it.hasNext();) {
			IMockStatement ps = it.next();
			result = result && !ps.hasError();

			if (!result) {
				return false;
			}
		}

		return result;
	}

	/**
	 * 全てのResultSetが閉じられているか確認する
	 *
	 * @return
	 */
	public boolean isAllResultSetClosed() {
		boolean result = true;
		for(Iterator<IMockStatement> it = psList.iterator();it.hasNext();) {


			try {
				MockResultSet resultSet = (MockResultSet)(it.next()).getResultSet();
				if (resultSet != null) {
					result = result && resultSet.isClosed();
				}

			} catch (SQLException e) {
				e.printStackTrace();
				throw new RuntimeException("致命的エラー");
			}

			if (!result) {
				return false;
			}

			it.remove();
		}

		return result;
	}


	private boolean throwExceptionInPs = false;
	public void setThrowExceptionInPreparedStatement(boolean throwExcept) {
		throwExceptionInPs = throwExcept;
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		MockPreparedStatement result = new MockPreparedStatement(impl.prepareStatement(sql), throwExceptionInPs);
		psList.add(result);

		return result;
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		MockPreparedStatement result = new MockPreparedStatement(impl.prepareStatement(sql, resultSetType, resultSetConcurrency), throwExceptionInPs);
		psList.add(result);

		return result;
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
					throws SQLException {
		MockPreparedStatement result =  new MockPreparedStatement(
				impl.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), throwExceptionInPs);

		psList.add(result);

		return result;
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
		MockPreparedStatement result = new MockPreparedStatement(impl.prepareStatement(sql, autoGeneratedKeys), throwExceptionInPs);

		psList.add(result);

		return result;
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {
		MockPreparedStatement result = new MockPreparedStatement(impl.prepareStatement(sql, columnIndexes), throwExceptionInPs);

		psList.add(result);

		return result;
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {
		MockPreparedStatement result = new MockPreparedStatement(impl.prepareStatement(sql, columnNames), throwExceptionInPs);

		psList.add(result);

		return result;
	}

	//以下ただの委譲メソッド

	public Statement createStatement() throws SQLException {
		IMockStatement result = new MockStatement(impl.createStatement(), throwExceptionInPs);
		psList.add(result);

		return result;
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return impl.prepareCall(sql);
	}

	public String nativeSQL(String sql) throws SQLException {
		return impl.nativeSQL(sql);
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		impl.setAutoCommit(autoCommit);
	}

	public boolean getAutoCommit() throws SQLException {
		return impl.getAutoCommit();
	}

	public void commit() throws SQLException {
		impl.commit();
	}

	public void rollback() throws SQLException {
		impl.rollback();
	}

	public void close() throws SQLException {
		impl.close();
	}

	public boolean isClosed() throws SQLException {
		return impl.isClosed();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return impl.getMetaData();
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		impl.setReadOnly(readOnly);
	}

	public boolean isReadOnly() throws SQLException {
		return impl.isReadOnly();
	}

	public void setCatalog(String catalog) throws SQLException {
		impl.setCatalog(catalog);
	}

	public String getCatalog() throws SQLException {
		return impl.getCatalog();
	}

	public void setTransactionIsolation(int level) throws SQLException {
		impl.setTransactionIsolation(level);
	}

	public int getTransactionIsolation() throws SQLException {
		return impl.getTransactionIsolation();
	}

	public SQLWarning getWarnings() throws SQLException {
		return impl.getWarnings();
	}

	public void clearWarnings() throws SQLException {
		impl.clearWarnings();
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException {
		IMockStatement result = new MockStatement(impl.createStatement(resultSetType, resultSetConcurrency), throwExceptionInPs);
		psList.add(result);

		return result;
	}


	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return impl.prepareCall(sql, resultSetType, resultSetConcurrency);
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return impl.getTypeMap();
	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		impl.setTypeMap(map);
	}

	public void setHoldability(int holdability) throws SQLException {
		impl.setHoldability(holdability);
	}

	public int getHoldability() throws SQLException {
		return impl.getHoldability();
	}

	public Savepoint setSavepoint() throws SQLException {
		return impl.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return impl.setSavepoint(name);
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		impl.rollback(savepoint);
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		impl.releaseSavepoint(savepoint);
	}

	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
					throws SQLException {
		IMockStatement result = new MockStatement(
				impl.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability), throwExceptionInPs);
		psList.add(result);

		return result;
	}


	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
					throws SQLException {
		return impl.prepareCall(sql, resultSetType, resultSetConcurrency,
				resultSetHoldability);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}

	@Override
	public Clob createClob() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public Blob createBlob() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public NClob createNClob() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public SQLXML createSQLXML() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public boolean isValid(int timeout) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}

	@Override
	public void setClientInfo(String name, String value)
			throws SQLClientInfoException {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public String getClientInfo(String name) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public Properties getClientInfo() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public Array createArrayOf(String typeName, Object[] elements)
			throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public Struct createStruct(String typeName, Object[] attributes)
			throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public void setSchema(String schema) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public String getSchema() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public void abort(Executor executor) throws SQLException {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void setNetworkTimeout(Executor executor, int milliseconds)
			throws SQLException {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public int getNetworkTimeout() throws SQLException {
		// TODO 自動生成されたメソッド・スタブ
		return 0;
	}

}
